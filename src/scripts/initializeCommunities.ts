/**
 * Script d'initialisation des communaut√©s Leadership Academy
 * 
 * Ce script cr√©e automatiquement les communaut√©s de base selon l'architecture d√©finie :
 * - Une communaut√© par facult√© (8 facult√©s)
 * - Une communaut√© par r√©gion principale
 * - Les communaut√©s de promotion depuis 2012
 * - Les communaut√©s professionnelles principales
 */

import { connectDB } from '../lib/mongodb';
import {
  Community,
  CommunityType,
  LEADERSHIP_ACADEMY_FACULTIES 
} from '../types/community';

interface CommunityTemplate {
  name: string;
  description: string;
  type: CommunityType;
  promotionYear?: number;
  facultyId?: string;
  departmentId?: string;
  region?: string;
  profession?: string;
  privacy: 'public' | 'private' | 'restricted';
}

async function initializeCommunities() {
  try {
    console.log('üöÄ Initialisation des communaut√©s Leadership Academy...');
    
    const { db } = await connectDB();
    
    // V√©rifier si des communaut√©s existent d√©j√†
    const existingCount = await db.collection('communities').countDocuments();
    if (existingCount > 0) {
      console.log(`‚ö†Ô∏è  ${existingCount} communaut√©s existent d√©j√†. Arr√™t de l'initialisation.`);
      return;
    }

    const communities: CommunityTemplate[] = [];

    // 1. Communaut√©s par facult√© (8 facult√©s)
    console.log('üìö Cr√©ation des communaut√©s de facult√©s...');
    LEADERSHIP_ACADEMY_FACULTIES.forEach(faculty => {
      communities.push({
        name: `Alumni ${faculty.name}`,
        description: `Communaut√© des anciens √©tudiants de la ${faculty.name}. Partagez vos exp√©riences professionnelles, opportunit√©s et restez connect√©s avec vos coll√®gues de promotion.`,
        type: CommunityType.FACULTY,
        facultyId: faculty.id,
        privacy: 'public'
      });
    });

    // 2. Communaut√©s par r√©gion
    console.log('üåç Cr√©ation des communaut√©s r√©gionales...');
    const mainRegions = ['Kinshasa', 'Lubumbashi', 'Goma', 'Bukavu', 'Matadi'];
    mainRegions.forEach(region => {
      communities.push({
        name: `Alumni ${region}`,
        description: `R√©seau des dipl√¥m√©s Leadership Academiabas√©s √† ${region}. Organisez des √©v√©nements locaux, des rencontres professionnelles et maintenez le lien dans votre r√©gion.`,
        type: CommunityType.REGION,
        region: region,
        privacy: 'public'
      });
    });

    // 3. Communaut√©s par promotion (derni√®res 5 ann√©es)
    console.log('üéì Cr√©ation des communaut√©s de promotion...');
    const currentYear = new Date().getFullYear();
    for (let year = currentYear - 4; year <= currentYear; year++) {
      communities.push({
        name: `Promotion ${year}`,
        description: `Retrouvez vos camarades de la promotion ${year} ! Partagez vos parcours professionnels, organisez des retrouvailles et maintenez l'esprit de coh√©sion de votre promotion.`,
        type: CommunityType.PROMOTION,
        promotionYear: year,
        privacy: 'public'
      });
    }

    // 4. Communaut√©s professionnelles principales
    console.log('üíº Cr√©ation des communaut√©s professionnelles...');
    const mainProfessions = [
      'Sant√© et M√©decine',
      'Ing√©nierie et Technologie', 
      'Finance et Banque',
      '√âducation et Formation',
      'Droit et Justice'
    ];
    mainProfessions.forEach(profession => {
      communities.push({
        name: `Professionnels - ${profession}`,
        description: `R√©seau professionnel des dipl√¥m√©s Leadership Academiadans le secteur ${profession}. √âchangez sur les tendances du secteur, partagez des opportunit√©s et d√©veloppez votre r√©seau professionnel.`,
        type: CommunityType.PROFESSION,
        profession: profession,
        privacy: 'public'
      });
    });

    // 5. Quelques communaut√©s de d√©partement pour les facult√©s principales
    console.log('üìñ Cr√©ation des communaut√©s de d√©partement...');
    const departmentCommunities = [
      {
        name: 'Informaticiens Leadership Academy',
        description: 'Communaut√© des dipl√¥m√©s en informatique. Partagez les derni√®res technologies, opportunit√©s IT et projets innovants.',
        facultyId: 'fac_ingenierie',
        departmentId: 'Informatique'
      },
      {
        name: 'M√©decins Leadership Academy',
        description: 'R√©seau des dipl√¥m√©s en m√©decine. √âchanges scientifiques, opportunit√©s m√©dicales et solidarit√© professionnelle.',
        facultyId: 'fac_medecine',
        departmentId: 'M√©decine G√©n√©rale'
      },
      {
        name: '√âconomistes et Gestionnaires',
        description: 'Communaut√© des dipl√¥m√©s en √©conomie et gestion. Analyses √©conomiques, opportunit√©s business et networking.',
        facultyId: 'fac_economie',
        departmentId: 'Finance'
      }
    ];

    departmentCommunities.forEach(dept => {
      communities.push({
        name: dept.name,
        description: dept.description,
        type: CommunityType.DEPARTMENT,
        facultyId: dept.facultyId,
        departmentId: dept.departmentId,
        privacy: 'public'
      });
    });

    // Convertir en format MongoDB
    const communityDocuments: Community[] = communities.map(template => ({
      ...template,
      memberCount: 0,
      isActive: true,
      moderators: [],
      rules: [
        'Respectez tous les membres de la communaut√©',
        'Partagez du contenu pertinent et constructif',
        'Aidez-vous mutuellement dans vos projets professionnels',
        'Maintenez la confidentialit√© des informations sensibles',
        'Participez activement aux discussions et √©v√©nements'
      ],
      createdAt: new Date(),
      updatedAt: new Date()
    }));

    // Ins√©rer en base
    console.log(`üíæ Insertion de ${communityDocuments.length} communaut√©s...`);
    const result = await db.collection('communities').insertMany(communityDocuments);
    
    console.log(`‚úÖ ${result.insertedCount} communaut√©s cr√©√©es avec succ√®s !`);
    
    // Statistiques finales
    const stats = {
      facultes: communities.filter(c => c.type === CommunityType.FACULTY).length,
      regions: communities.filter(c => c.type === CommunityType.REGION).length,
      promotions: communities.filter(c => c.type === CommunityType.PROMOTION).length,
      professions: communities.filter(c => c.type === CommunityType.PROFESSION).length,
      departements: communities.filter(c => c.type === CommunityType.DEPARTMENT).length
    };

    console.log('\nüìä R√©capitulatif des communaut√©s cr√©√©es :');
    console.log(`   ‚Ä¢ ${stats.facultes} communaut√©s de facult√©s`);
    console.log(`   ‚Ä¢ ${stats.regions} communaut√©s r√©gionales`);
    console.log(`   ‚Ä¢ ${stats.promotions} communaut√©s de promotion`);
    console.log(`   ‚Ä¢ ${stats.professions} communaut√©s professionnelles`);
    console.log(`   ‚Ä¢ ${stats.departements} communaut√©s de d√©partement`);
    console.log(`   üìà Total : ${communityDocuments.length} communaut√©s`);

    console.log('\nüéâ Initialisation termin√©e avec succ√®s !');
    console.log('üîó Les utilisateurs peuvent maintenant rejoindre ces communaut√©s via /communities');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation des communaut√©s:', error);
    throw error;
  }
}

// Fonction pour r√©initialiser toutes les communaut√©s (ATTENTION : destructif)
async function resetCommunities() {
  try {
    console.log('‚ö†Ô∏è  ATTENTION : Suppression de toutes les communaut√©s existantes...');
    
    const { db } = await connectDB();
    const result = await db.collection('communities').deleteMany({});
    
    console.log(`üóëÔ∏è  ${result.deletedCount} communaut√©s supprim√©es.`);
    console.log('üîÑ Vous pouvez maintenant relancer l\'initialisation.');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©initialisation:', error);
    throw error;
  }
}

// Export des fonctions pour utilisation programmatique
export { initializeCommunities, resetCommunities };

// Ex√©cution directe si appel√© en ligne de commande
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--reset')) {
    resetCommunities()
      .then(() => process.exit(0))
      .catch(() => process.exit(1));
  } else {
    initializeCommunities()
      .then(() => process.exit(0))
      .catch(() => process.exit(1));
  }
} 